2023/07/03 11:13:39 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 (default, Jun 12 2023, 18:09:05) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 653557671
    GPU 0: NVIDIA GeForce GTX 1650
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.8, V11.8.89
    GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
    PyTorch: 2.0.1+cu117
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.2+cu117
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 653557671
    diff_rank_seed: False
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/07/03 11:13:39 - mmengine - INFO - Config:
model = dict(
    type='Recognizer2D',
    backbone=dict(
        type='ResNet',
        pretrained='https://download.pytorch.org/models/resnet50-11ad3fa6.pth',
        depth=50,
        norm_eval=False),
    cls_head=dict(
        type='TSNHead',
        num_classes=2,
        in_channels=2048,
        spatial_type='avg',
        consensus=dict(type='AvgConsensus', dim=1),
        dropout_ratio=0.4,
        init_std=0.01,
        average_clips='prob'),
    data_preprocessor=dict(
        type='ActionDataPreprocessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        format_shape='NCHW'),
    train_cfg=None,
    test_cfg=None)
train_cfg = dict(
    type='EpochBasedTrainLoop', max_epochs=50, val_begin=1, val_interval=1)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='MultiStepLR',
        begin=0,
        end=50,
        by_epoch=True,
        milestones=[20, 40],
        gamma=0.1)
]
optim_wrapper = dict(
    optimizer=dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=0.0001),
    clip_grad=dict(max_norm=40, norm_type=2))
default_scope = 'mmaction'
default_hooks = dict(
    runtime_info=dict(type='RuntimeInfoHook'),
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=20, ignore_last=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=3, save_best='auto', max_keep_ckpts=3),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    sync_buffers=dict(type='SyncBuffersHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
log_processor = dict(type='LogProcessor', window_size=20, by_epoch=True)
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='ActionVisualizer', vis_backends=[dict(type='LocalVisBackend')])
log_level = 'INFO'
load_from = '/home/cma/mmaction2/work_dirs/tsn_ucf101/epoch_50.pth'
resume = False
dataset_type = 'VideoDataset'
data_root = '/home/cma/MMA data/train'
data_root_val = '/home/cma/MMA data/val'
ann_file_train = '/home/cma/MMA data/train_video.txt'
ann_file_val = '/home/cma/MMA data/val_video.txt'
file_client_args = dict(io_backend='disk')
train_pipeline = [
    dict(type='DecordInit', io_backend='disk'),
    dict(type='SampleFrames', clip_len=1, frame_interval=1, num_clips=3),
    dict(type='DecordDecode'),
    dict(type='Resize', scale=(-1, 256)),
    dict(
        type='MultiScaleCrop',
        input_size=800,
        scales=(1, 0.875, 0.75, 0.66),
        random_crop=False,
        max_wh_scale_gap=1),
    dict(type='Resize', scale=(800, 600), keep_ratio=False),
    dict(type='Flip', flip_ratio=0.5),
    dict(type='FormatShape', input_format='NCHW'),
    dict(type='PackActionInputs')
]
val_pipeline = [
    dict(type='DecordInit', io_backend='disk'),
    dict(
        type='SampleFrames',
        clip_len=1,
        frame_interval=1,
        num_clips=3,
        test_mode=True),
    dict(type='DecordDecode'),
    dict(type='Resize', scale=(-1, 256)),
    dict(type='CenterCrop', crop_size=800),
    dict(type='FormatShape', input_format='NCHW'),
    dict(type='PackActionInputs')
]
test_pipeline = [
    dict(type='DecordInit', io_backend='disk'),
    dict(
        type='SampleFrames',
        clip_len=1,
        frame_interval=1,
        num_clips=25,
        test_mode=True),
    dict(type='DecordDecode'),
    dict(type='Resize', scale=(-1, 256)),
    dict(type='TenCrop', crop_size=800),
    dict(type='FormatShape', input_format='NCHW'),
    dict(type='PackActionInputs')
]
train_dataloader = dict(
    batch_size=1,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    dataset=dict(
        type='VideoDataset',
        ann_file='/home/cma/MMA data/train_video.txt',
        data_prefix=dict(video='/home/cma/MMA data/train'),
        pipeline=[
            dict(type='DecordInit', io_backend='disk'),
            dict(
                type='SampleFrames', clip_len=1, frame_interval=1,
                num_clips=3),
            dict(type='DecordDecode'),
            dict(type='Resize', scale=(-1, 256)),
            dict(
                type='MultiScaleCrop',
                input_size=800,
                scales=(1, 0.875, 0.75, 0.66),
                random_crop=False,
                max_wh_scale_gap=1),
            dict(type='Resize', scale=(800, 600), keep_ratio=False),
            dict(type='Flip', flip_ratio=0.5),
            dict(type='FormatShape', input_format='NCHW'),
            dict(type='PackActionInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='VideoDataset',
        ann_file='/home/cma/MMA data/val_video.txt',
        data_prefix=dict(video='/home/cma/MMA data/val'),
        pipeline=[
            dict(type='DecordInit', io_backend='disk'),
            dict(
                type='SampleFrames',
                clip_len=1,
                frame_interval=1,
                num_clips=3,
                test_mode=True),
            dict(type='DecordDecode'),
            dict(type='Resize', scale=(-1, 256)),
            dict(type='CenterCrop', crop_size=800),
            dict(type='FormatShape', input_format='NCHW'),
            dict(type='PackActionInputs')
        ],
        test_mode=True))
test_dataloader = dict(
    batch_size=1,
    num_workers=1,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='VideoDataset',
        ann_file='/home/cma/MMA data/val_video.txt',
        data_prefix=dict(video='/home/cma/MMA data/val'),
        pipeline=[
            dict(type='DecordInit', io_backend='disk'),
            dict(
                type='SampleFrames',
                clip_len=1,
                frame_interval=1,
                num_clips=25,
                test_mode=True),
            dict(type='DecordDecode'),
            dict(type='Resize', scale=(-1, 256)),
            dict(type='TenCrop', crop_size=800),
            dict(type='FormatShape', input_format='NCHW'),
            dict(type='PackActionInputs')
        ],
        test_mode=True))
val_evaluator = dict(type='AccMetric')
test_evaluator = dict(type='AccMetric')
auto_scale_lr = dict(enable=False, base_batch_size=1)
launcher = 'none'
work_dir = './work_dirs/tsn_ucf101'
randomness = dict(seed=None, diff_rank_seed=False, deterministic=False)

2023/07/03 11:13:41 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/07/03 11:13:41 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/07/03 11:13:41 - mmengine - INFO - These parameters in pretrained checkpoint are not loaded: {'fc.weight', 'fc.bias'}
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv1.conv.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv2.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv2.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv3.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv3.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.conv3.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.downsample.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.downsample.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.0.downsample.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv1.conv.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv2.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv2.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv3.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv3.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.1.conv3.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv1.conv.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv1.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv1.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv2.conv.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv2.bn.weight - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv2.bn.bias - torch.Size([64]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv3.conv.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv3.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer1.2.conv3.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv1.conv.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.downsample.conv.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.downsample.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.0.downsample.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.1.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.2.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv1.conv.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv1.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv1.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv2.conv.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv2.bn.weight - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv2.bn.bias - torch.Size([128]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv3.conv.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv3.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer2.3.conv3.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.downsample.conv.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.downsample.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.0.downsample.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.1.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.2.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.3.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.4.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv1.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv1.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv1.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv2.bn.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv2.bn.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv3.conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv3.bn.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer3.5.conv3.bn.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv1.conv.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv1.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv1.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv2.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv2.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv3.conv.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv3.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.conv3.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.downsample.conv.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.downsample.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.0.downsample.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv1.conv.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv1.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv1.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv2.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv2.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv3.conv.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv3.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.1.conv3.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv1.conv.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv1.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv1.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv2.conv.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv2.bn.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv2.bn.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv3.conv.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv3.bn.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

backbone.layer4.2.conv3.bn.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in ResNet  

cls_head.fc_cls.weight - torch.Size([2, 2048]): 
Initialized by user-defined `init_weights` in TSNHead  

cls_head.fc_cls.bias - torch.Size([2]): 
Initialized by user-defined `init_weights` in TSNHead  
2023/07/03 11:13:45 - mmengine - INFO - Load checkpoint from /home/cma/mmaction2/work_dirs/tsn_ucf101/epoch_50.pth
2023/07/03 11:13:45 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/07/03 11:13:45 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/07/03 11:13:45 - mmengine - INFO - Checkpoints will be saved to /home/cma/mmaction2/work_dirs/tsn_ucf101.
2023/07/03 11:14:13 - mmengine - INFO - Epoch(train)  [1][ 20/126]  lr: 5.0000e-03  eta: 2:27:37  time: 1.4104  data_time: 0.0784  memory: 2631  grad_norm: 7.5940  loss: 0.5387  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5387
2023/07/03 11:14:22 - mmengine - INFO - Epoch(train)  [1][ 40/126]  lr: 5.0000e-03  eta: 1:36:38  time: 0.4421  data_time: 0.0019  memory: 2629  grad_norm: 5.7497  loss: 0.4835  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4835
2023/07/03 11:14:31 - mmengine - INFO - Epoch(train)  [1][ 60/126]  lr: 5.0000e-03  eta: 1:20:40  time: 0.4747  data_time: 0.0329  memory: 2629  grad_norm: 5.9245  loss: 0.5279  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5279
2023/07/03 11:14:41 - mmengine - INFO - Epoch(train)  [1][ 80/126]  lr: 5.0000e-03  eta: 1:12:36  time: 0.4744  data_time: 0.0313  memory: 2629  grad_norm: 5.4650  loss: 0.4725  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4725
2023/07/03 11:14:50 - mmengine - INFO - Epoch(train)  [1][100/126]  lr: 5.0000e-03  eta: 1:07:16  time: 0.4534  data_time: 0.0092  memory: 2629  grad_norm: 6.3436  loss: 0.7550  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.7550
2023/07/03 11:14:59 - mmengine - INFO - Epoch(train)  [1][120/126]  lr: 5.0000e-03  eta: 1:03:33  time: 0.4472  data_time: 0.0020  memory: 2629  grad_norm: 5.5545  loss: 0.5346  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5346
2023/07/03 11:15:01 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:15:01 - mmengine - INFO - Epoch(train)  [1][126/126]  lr: 5.0000e-03  eta: 1:02:45  time: 0.4531  data_time: 0.0076  memory: 2629  grad_norm: 6.4163  loss: 0.6421  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6421
2023/07/03 11:15:13 - mmengine - INFO - Epoch(val)  [1][20/36]    eta: 0:00:09  time: 0.6027  data_time: 0.5796  memory: 230  
2023/07/03 11:15:22 - mmengine - INFO - Epoch(val) [1][36/36]    acc/top1: 0.6111  acc/top5: 1.0000  acc/mean1: 0.7054  data_time: 0.5612  time: 0.5842
2023/07/03 11:15:23 - mmengine - INFO - The best checkpoint with 0.6111 acc/top1 at 1 epoch is saved to best_acc_top1_epoch_1.pth.
2023/07/03 11:15:32 - mmengine - INFO - Epoch(train)  [2][ 20/126]  lr: 5.0000e-03  eta: 1:00:28  time: 0.4617  data_time: 0.0164  memory: 2629  grad_norm: 4.2446  loss: 0.4207  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4207
2023/07/03 11:15:41 - mmengine - INFO - Epoch(train)  [2][ 40/126]  lr: 5.0000e-03  eta: 0:58:30  time: 0.4468  data_time: 0.0019  memory: 2629  grad_norm: 5.7075  loss: 0.5713  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5713
2023/07/03 11:15:50 - mmengine - INFO - Epoch(train)  [2][ 60/126]  lr: 5.0000e-03  eta: 0:56:57  time: 0.4483  data_time: 0.0020  memory: 2629  grad_norm: 5.9708  loss: 0.6316  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6316
2023/07/03 11:15:59 - mmengine - INFO - Epoch(train)  [2][ 80/126]  lr: 5.0000e-03  eta: 0:55:41  time: 0.4489  data_time: 0.0021  memory: 2629  grad_norm: 5.1259  loss: 0.5677  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5677
2023/07/03 11:16:08 - mmengine - INFO - Epoch(train)  [2][100/126]  lr: 5.0000e-03  eta: 0:54:37  time: 0.4490  data_time: 0.0021  memory: 2629  grad_norm: 5.0954  loss: 0.7257  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.7257
2023/07/03 11:16:17 - mmengine - INFO - Epoch(train)  [2][120/126]  lr: 5.0000e-03  eta: 0:53:41  time: 0.4491  data_time: 0.0020  memory: 2629  grad_norm: 4.4605  loss: 0.5068  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5068
2023/07/03 11:16:20 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:16:20 - mmengine - INFO - Epoch(train)  [2][126/126]  lr: 5.0000e-03  eta: 0:53:26  time: 0.4492  data_time: 0.0020  memory: 2629  grad_norm: 4.5589  loss: 0.5468  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5468
2023/07/03 11:16:25 - mmengine - INFO - Epoch(val)  [2][20/36]    eta: 0:00:04  time: 0.2670  data_time: 0.2452  memory: 230  
2023/07/03 11:16:29 - mmengine - INFO - Epoch(val) [2][36/36]    acc/top1: 0.4167  acc/top5: 1.0000  acc/mean1: 0.4464  data_time: 0.2546  time: 0.2768
2023/07/03 11:16:39 - mmengine - INFO - Epoch(train)  [3][ 20/126]  lr: 5.0000e-03  eta: 0:52:45  time: 0.4610  data_time: 0.0139  memory: 2629  grad_norm: 3.5556  loss: 0.3468  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3468
2023/07/03 11:16:48 - mmengine - INFO - Epoch(train)  [3][ 40/126]  lr: 5.0000e-03  eta: 0:52:03  time: 0.4491  data_time: 0.0021  memory: 2629  grad_norm: 5.7401  loss: 0.8291  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.8291
2023/07/03 11:16:56 - mmengine - INFO - Epoch(train)  [3][ 60/126]  lr: 5.0000e-03  eta: 0:51:26  time: 0.4492  data_time: 0.0018  memory: 2629  grad_norm: 4.8904  loss: 0.6108  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6108
2023/07/03 11:17:05 - mmengine - INFO - Epoch(train)  [3][ 80/126]  lr: 5.0000e-03  eta: 0:50:51  time: 0.4488  data_time: 0.0019  memory: 2629  grad_norm: 5.0052  loss: 0.5408  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5408
2023/07/03 11:17:14 - mmengine - INFO - Epoch(train)  [3][100/126]  lr: 5.0000e-03  eta: 0:50:20  time: 0.4488  data_time: 0.0018  memory: 2629  grad_norm: 6.0042  loss: 0.7463  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.7463
2023/07/03 11:17:23 - mmengine - INFO - Epoch(train)  [3][120/126]  lr: 5.0000e-03  eta: 0:49:51  time: 0.4497  data_time: 0.0019  memory: 2629  grad_norm: 4.2190  loss: 0.5866  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.5866
2023/07/03 11:17:26 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:17:26 - mmengine - INFO - Epoch(train)  [3][126/126]  lr: 5.0000e-03  eta: 0:49:43  time: 0.4498  data_time: 0.0019  memory: 2629  grad_norm: 4.8313  loss: 0.6881  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6881
2023/07/03 11:17:26 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/07/03 11:17:32 - mmengine - INFO - Epoch(val)  [3][20/36]    eta: 0:00:04  time: 0.2599  data_time: 0.2382  memory: 230  
2023/07/03 11:17:36 - mmengine - INFO - Epoch(val) [3][36/36]    acc/top1: 0.3611  acc/top5: 1.0000  acc/mean1: 0.5000  data_time: 0.2435  time: 0.2656
2023/07/03 11:17:45 - mmengine - INFO - Epoch(train)  [4][ 20/126]  lr: 5.0000e-03  eta: 0:49:21  time: 0.4637  data_time: 0.0156  memory: 2629  grad_norm: 3.7937  loss: 0.5186  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5186
2023/07/03 11:17:54 - mmengine - INFO - Epoch(train)  [4][ 40/126]  lr: 5.0000e-03  eta: 0:48:56  time: 0.4496  data_time: 0.0019  memory: 2629  grad_norm: 4.0026  loss: 0.5103  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.5103
2023/07/03 11:18:03 - mmengine - INFO - Epoch(train)  [4][ 60/126]  lr: 5.0000e-03  eta: 0:48:33  time: 0.4496  data_time: 0.0018  memory: 2629  grad_norm: 5.2838  loss: 0.8152  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.8152
2023/07/03 11:18:12 - mmengine - INFO - Epoch(train)  [4][ 80/126]  lr: 5.0000e-03  eta: 0:48:11  time: 0.4494  data_time: 0.0019  memory: 2629  grad_norm: 3.6617  loss: 0.6250  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6250
2023/07/03 11:18:21 - mmengine - INFO - Epoch(train)  [4][100/126]  lr: 5.0000e-03  eta: 0:47:50  time: 0.4503  data_time: 0.0020  memory: 2629  grad_norm: 2.9995  loss: 0.5985  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.5985
2023/07/03 11:18:30 - mmengine - INFO - Epoch(train)  [4][120/126]  lr: 5.0000e-03  eta: 0:47:31  time: 0.4508  data_time: 0.0019  memory: 2629  grad_norm: 3.1669  loss: 0.5434  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.5434
2023/07/03 11:18:33 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:18:33 - mmengine - INFO - Epoch(train)  [4][126/126]  lr: 5.0000e-03  eta: 0:47:25  time: 0.4507  data_time: 0.0018  memory: 2629  grad_norm: 3.3685  loss: 0.5783  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.5783
2023/07/03 11:18:38 - mmengine - INFO - Epoch(val)  [4][20/36]    eta: 0:00:04  time: 0.2562  data_time: 0.2347  memory: 230  
2023/07/03 11:18:43 - mmengine - INFO - Epoch(val) [4][36/36]    acc/top1: 0.6944  acc/top5: 1.0000  acc/mean1: 0.4464  data_time: 0.2412  time: 0.2632
2023/07/03 11:18:43 - mmengine - INFO - The previous best checkpoint /home/cma/mmaction2/work_dirs/tsn_ucf101/best_acc_top1_epoch_1.pth is removed
2023/07/03 11:18:43 - mmengine - INFO - The best checkpoint with 0.6944 acc/top1 at 4 epoch is saved to best_acc_top1_epoch_4.pth.
2023/07/03 11:18:53 - mmengine - INFO - Epoch(train)  [5][ 20/126]  lr: 5.0000e-03  eta: 0:47:10  time: 0.4685  data_time: 0.0199  memory: 2629  grad_norm: 3.5637  loss: 0.5103  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5103
2023/07/03 11:19:02 - mmengine - INFO - Epoch(train)  [5][ 40/126]  lr: 5.0000e-03  eta: 0:46:52  time: 0.4495  data_time: 0.0018  memory: 2629  grad_norm: 3.7283  loss: 0.3952  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3952
2023/07/03 11:19:11 - mmengine - INFO - Epoch(train)  [5][ 60/126]  lr: 5.0000e-03  eta: 0:46:34  time: 0.4500  data_time: 0.0019  memory: 2629  grad_norm: 2.9060  loss: 0.3269  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3269
2023/07/03 11:19:20 - mmengine - INFO - Epoch(train)  [5][ 80/126]  lr: 5.0000e-03  eta: 0:46:17  time: 0.4507  data_time: 0.0018  memory: 2629  grad_norm: 4.9247  loss: 0.5704  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.5704
2023/07/03 11:19:29 - mmengine - INFO - Epoch(train)  [5][100/126]  lr: 5.0000e-03  eta: 0:46:01  time: 0.4508  data_time: 0.0019  memory: 2629  grad_norm: 5.9734  loss: 0.6323  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6323
2023/07/03 11:19:38 - mmengine - INFO - Epoch(train)  [5][120/126]  lr: 5.0000e-03  eta: 0:45:45  time: 0.4513  data_time: 0.0019  memory: 2629  grad_norm: 4.7853  loss: 0.5813  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5813
2023/07/03 11:19:41 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:19:41 - mmengine - INFO - Epoch(train)  [5][126/126]  lr: 5.0000e-03  eta: 0:45:40  time: 0.4514  data_time: 0.0019  memory: 2629  grad_norm: 4.3629  loss: 0.6086  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6086
2023/07/03 11:19:46 - mmengine - INFO - Epoch(val)  [5][20/36]    eta: 0:00:04  time: 0.2584  data_time: 0.2369  memory: 230  
2023/07/03 11:19:50 - mmengine - INFO - Epoch(val) [5][36/36]    acc/top1: 0.6944  acc/top5: 1.0000  acc/mean1: 0.4911  data_time: 0.2414  time: 0.2634
2023/07/03 11:19:59 - mmengine - INFO - Epoch(train)  [6][ 20/126]  lr: 5.0000e-03  eta: 0:45:28  time: 0.4665  data_time: 0.0172  memory: 2629  grad_norm: 3.4234  loss: 0.4567  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.4567
2023/07/03 11:20:08 - mmengine - INFO - Epoch(train)  [6][ 40/126]  lr: 5.0000e-03  eta: 0:45:13  time: 0.4504  data_time: 0.0019  memory: 2629  grad_norm: 4.0216  loss: 0.5763  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5763
2023/07/03 11:20:17 - mmengine - INFO - Epoch(train)  [6][ 60/126]  lr: 5.0000e-03  eta: 0:44:58  time: 0.4517  data_time: 0.0032  memory: 2629  grad_norm: 4.3254  loss: 0.5577  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5577
2023/07/03 11:20:26 - mmengine - INFO - Epoch(train)  [6][ 80/126]  lr: 5.0000e-03  eta: 0:44:44  time: 0.4510  data_time: 0.0019  memory: 2629  grad_norm: 4.3453  loss: 0.5116  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5116
2023/07/03 11:20:35 - mmengine - INFO - Epoch(train)  [6][100/126]  lr: 5.0000e-03  eta: 0:44:30  time: 0.4513  data_time: 0.0018  memory: 2629  grad_norm: 4.5464  loss: 0.6293  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6293
2023/07/03 11:20:44 - mmengine - INFO - Epoch(train)  [6][120/126]  lr: 5.0000e-03  eta: 0:44:16  time: 0.4516  data_time: 0.0019  memory: 2629  grad_norm: 4.6668  loss: 0.4934  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.4934
2023/07/03 11:20:47 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:20:47 - mmengine - INFO - Epoch(train)  [6][126/126]  lr: 5.0000e-03  eta: 0:44:12  time: 0.4515  data_time: 0.0019  memory: 2629  grad_norm: 5.5280  loss: 0.6190  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6190
2023/07/03 11:20:47 - mmengine - INFO - Saving checkpoint at 6 epochs
2023/07/03 11:20:53 - mmengine - INFO - Epoch(val)  [6][20/36]    eta: 0:00:04  time: 0.2593  data_time: 0.2374  memory: 230  
2023/07/03 11:20:57 - mmengine - INFO - Epoch(val) [6][36/36]    acc/top1: 0.4444  acc/top5: 1.0000  acc/mean1: 0.4643  data_time: 0.2432  time: 0.2655
2023/07/03 11:21:06 - mmengine - INFO - Epoch(train)  [7][ 20/126]  lr: 5.0000e-03  eta: 0:44:01  time: 0.4653  data_time: 0.0162  memory: 2629  grad_norm: 3.7928  loss: 0.4555  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4555
2023/07/03 11:21:15 - mmengine - INFO - Epoch(train)  [7][ 40/126]  lr: 5.0000e-03  eta: 0:43:47  time: 0.4509  data_time: 0.0019  memory: 2629  grad_norm: 3.1597  loss: 0.3148  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3148
2023/07/03 11:21:24 - mmengine - INFO - Epoch(train)  [7][ 60/126]  lr: 5.0000e-03  eta: 0:43:34  time: 0.4511  data_time: 0.0020  memory: 2629  grad_norm: 4.8369  loss: 0.5837  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5837
2023/07/03 11:21:34 - mmengine - INFO - Epoch(train)  [7][ 80/126]  lr: 5.0000e-03  eta: 0:43:21  time: 0.4512  data_time: 0.0020  memory: 2629  grad_norm: 3.5430  loss: 0.3735  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3735
2023/07/03 11:21:43 - mmengine - INFO - Epoch(train)  [7][100/126]  lr: 5.0000e-03  eta: 0:43:09  time: 0.4515  data_time: 0.0021  memory: 2629  grad_norm: 4.0969  loss: 0.4318  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4318
2023/07/03 11:21:52 - mmengine - INFO - Epoch(train)  [7][120/126]  lr: 5.0000e-03  eta: 0:42:56  time: 0.4518  data_time: 0.0020  memory: 2629  grad_norm: 5.9297  loss: 0.7600  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.7600
2023/07/03 11:21:54 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:21:54 - mmengine - INFO - Epoch(train)  [7][126/126]  lr: 5.0000e-03  eta: 0:42:52  time: 0.4520  data_time: 0.0019  memory: 2629  grad_norm: 5.2771  loss: 0.6062  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6062
2023/07/03 11:21:59 - mmengine - INFO - Epoch(val)  [7][20/36]    eta: 0:00:04  time: 0.2575  data_time: 0.2360  memory: 230  
2023/07/03 11:22:04 - mmengine - INFO - Epoch(val) [7][36/36]    acc/top1: 0.6111  acc/top5: 1.0000  acc/mean1: 0.3929  data_time: 0.2402  time: 0.2623
2023/07/03 11:22:13 - mmengine - INFO - Epoch(train)  [8][ 20/126]  lr: 5.0000e-03  eta: 0:42:42  time: 0.4661  data_time: 0.0168  memory: 2629  grad_norm: 3.5347  loss: 0.3720  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3720
2023/07/03 11:22:22 - mmengine - INFO - Epoch(train)  [8][ 40/126]  lr: 5.0000e-03  eta: 0:42:30  time: 0.4511  data_time: 0.0020  memory: 2629  grad_norm: 2.8127  loss: 0.3520  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.3520
2023/07/03 11:22:31 - mmengine - INFO - Epoch(train)  [8][ 60/126]  lr: 5.0000e-03  eta: 0:42:19  time: 0.4643  data_time: 0.0155  memory: 2629  grad_norm: 6.1713  loss: 0.7481  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.7481
2023/07/03 11:22:40 - mmengine - INFO - Epoch(train)  [8][ 80/126]  lr: 5.0000e-03  eta: 0:42:07  time: 0.4524  data_time: 0.0035  memory: 2629  grad_norm: 5.5560  loss: 0.8292  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.8292
2023/07/03 11:22:49 - mmengine - INFO - Epoch(train)  [8][100/126]  lr: 5.0000e-03  eta: 0:41:55  time: 0.4513  data_time: 0.0019  memory: 2629  grad_norm: 3.3103  loss: 0.3828  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3828
2023/07/03 11:22:58 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:22:58 - mmengine - INFO - Epoch(train)  [8][120/126]  lr: 5.0000e-03  eta: 0:41:44  time: 0.4520  data_time: 0.0020  memory: 2629  grad_norm: 4.8874  loss: 0.6467  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6467
2023/07/03 11:23:01 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:23:01 - mmengine - INFO - Epoch(train)  [8][126/126]  lr: 5.0000e-03  eta: 0:41:40  time: 0.4521  data_time: 0.0020  memory: 2629  grad_norm: 5.1193  loss: 0.6558  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6558
2023/07/03 11:23:06 - mmengine - INFO - Epoch(val)  [8][20/36]    eta: 0:00:04  time: 0.2632  data_time: 0.2418  memory: 230  
2023/07/03 11:23:11 - mmengine - INFO - Epoch(val) [8][36/36]    acc/top1: 0.7500  acc/top5: 1.0000  acc/mean1: 0.4821  data_time: 0.2446  time: 0.2666
2023/07/03 11:23:12 - mmengine - INFO - The previous best checkpoint /home/cma/mmaction2/work_dirs/tsn_ucf101/best_acc_top1_epoch_4.pth is removed
2023/07/03 11:23:12 - mmengine - INFO - The best checkpoint with 0.7500 acc/top1 at 8 epoch is saved to best_acc_top1_epoch_8.pth.
2023/07/03 11:23:22 - mmengine - INFO - Epoch(train)  [9][ 20/126]  lr: 5.0000e-03  eta: 0:41:30  time: 0.4665  data_time: 0.0167  memory: 2629  grad_norm: 3.4634  loss: 0.5486  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5486
2023/07/03 11:23:31 - mmengine - INFO - Epoch(train)  [9][ 40/126]  lr: 5.0000e-03  eta: 0:41:19  time: 0.4516  data_time: 0.0022  memory: 2629  grad_norm: 3.5527  loss: 0.4902  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4902
2023/07/03 11:23:40 - mmengine - INFO - Epoch(train)  [9][ 60/126]  lr: 5.0000e-03  eta: 0:41:07  time: 0.4516  data_time: 0.0019  memory: 2629  grad_norm: 2.9161  loss: 0.3838  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3838
2023/07/03 11:23:49 - mmengine - INFO - Epoch(train)  [9][ 80/126]  lr: 5.0000e-03  eta: 0:40:56  time: 0.4517  data_time: 0.0019  memory: 2629  grad_norm: 3.8912  loss: 0.4595  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4595
2023/07/03 11:23:58 - mmengine - INFO - Epoch(train)  [9][100/126]  lr: 5.0000e-03  eta: 0:40:45  time: 0.4527  data_time: 0.0019  memory: 2629  grad_norm: 5.3350  loss: 0.9416  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.9416
2023/07/03 11:24:07 - mmengine - INFO - Epoch(train)  [9][120/126]  lr: 5.0000e-03  eta: 0:40:34  time: 0.4529  data_time: 0.0019  memory: 2629  grad_norm: 3.4408  loss: 0.6848  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.6848
2023/07/03 11:24:10 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:24:10 - mmengine - INFO - Epoch(train)  [9][126/126]  lr: 5.0000e-03  eta: 0:40:30  time: 0.4529  data_time: 0.0019  memory: 2629  grad_norm: 3.5479  loss: 0.7213  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.7213
2023/07/03 11:24:10 - mmengine - INFO - Saving checkpoint at 9 epochs
2023/07/03 11:24:17 - mmengine - INFO - Epoch(val)  [9][20/36]    eta: 0:00:04  time: 0.2648  data_time: 0.2425  memory: 230  
2023/07/03 11:24:21 - mmengine - INFO - Epoch(val) [9][36/36]    acc/top1: 0.4444  acc/top5: 1.0000  acc/mean1: 0.5982  data_time: 0.2460  time: 0.2684
2023/07/03 11:24:30 - mmengine - INFO - Epoch(train) [10][ 20/126]  lr: 5.0000e-03  eta: 0:40:20  time: 0.4666  data_time: 0.0162  memory: 2629  grad_norm: 2.4057  loss: 0.3957  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3957
2023/07/03 11:24:39 - mmengine - INFO - Epoch(train) [10][ 40/126]  lr: 5.0000e-03  eta: 0:40:09  time: 0.4520  data_time: 0.0019  memory: 2629  grad_norm: 3.7482  loss: 0.5921  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5921
2023/07/03 11:24:48 - mmengine - INFO - Epoch(train) [10][ 60/126]  lr: 5.0000e-03  eta: 0:39:59  time: 0.4524  data_time: 0.0019  memory: 2629  grad_norm: 3.3124  loss: 0.4328  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4328
2023/07/03 11:24:57 - mmengine - INFO - Epoch(train) [10][ 80/126]  lr: 5.0000e-03  eta: 0:39:48  time: 0.4524  data_time: 0.0019  memory: 2629  grad_norm: 2.1803  loss: 0.2571  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.2571
2023/07/03 11:25:06 - mmengine - INFO - Epoch(train) [10][100/126]  lr: 5.0000e-03  eta: 0:39:37  time: 0.4532  data_time: 0.0020  memory: 2629  grad_norm: 4.5413  loss: 0.5406  top1_acc: 0.0000  top5_acc: 1.0000  loss_cls: 0.5406
2023/07/03 11:25:16 - mmengine - INFO - Epoch(train) [10][120/126]  lr: 5.0000e-03  eta: 0:39:27  time: 0.4641  data_time: 0.0047  memory: 2629  grad_norm: 4.6863  loss: 0.6679  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.6679
2023/07/03 11:25:19 - mmengine - INFO - Exp name: tsn_ucf101_20230703_111339
2023/07/03 11:25:19 - mmengine - INFO - Epoch(train) [10][126/126]  lr: 5.0000e-03  eta: 0:39:24  time: 0.4664  data_time: 0.0052  memory: 2629  grad_norm: 3.7922  loss: 0.5473  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.5473
2023/07/03 11:25:26 - mmengine - INFO - Epoch(val) [10][20/36]    eta: 0:00:06  time: 0.3868  data_time: 0.3470  memory: 230  
2023/07/03 11:25:31 - mmengine - INFO - Epoch(val) [10][36/36]    acc/top1: 0.7500  acc/top5: 1.0000  acc/mean1: 0.5714  data_time: 0.3164  time: 0.3495
2023/07/03 11:25:41 - mmengine - INFO - Epoch(train) [11][ 20/126]  lr: 5.0000e-03  eta: 0:39:15  time: 0.4725  data_time: 0.0192  memory: 2629  grad_norm: 3.0200  loss: 0.4163  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4163
2023/07/03 11:25:50 - mmengine - INFO - Epoch(train) [11][ 40/126]  lr: 5.0000e-03  eta: 0:39:05  time: 0.4547  data_time: 0.0020  memory: 2629  grad_norm: 2.8640  loss: 0.3104  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.3104
2023/07/03 11:25:59 - mmengine - INFO - Epoch(train) [11][ 60/126]  lr: 5.0000e-03  eta: 0:38:54  time: 0.4542  data_time: 0.0020  memory: 2629  grad_norm: 3.6005  loss: 0.4673  top1_acc: 1.0000  top5_acc: 1.0000  loss_cls: 0.4673
